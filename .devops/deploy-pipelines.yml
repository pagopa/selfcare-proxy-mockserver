# Azure DevOps pipeline to release a new version and deploy to production.

# Only manual activations are intended
trigger: none
pr: none

resources:
  - repo: self

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    default: dev
    values:
      - DEV
      - UAT
      - PROD
  - name: version
    displayName: Version of the docker image
    type: string
    default: 5.15.0
  - name: 'executeBuild'
    displayName: 'Remove this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: true

variables:
  dockerfileRelativePath: '$(DOCKERFILE)' # DockerfileV1
  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  deployNamespace: '$(DEPLOY_NAMESPACE)'
  deploymentName: '$(DEPLOYMENT_NAME)'
  port: 8080
  # Agent VM image name for Build
  vmImageNameDefault: 'ubuntu-latest'

  ${{ if eq(parameters['environment'], 'DEV') }}:
    environment: 'DEV'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(DEV_AGENT_POOL)
    replicas: 1 #$(DEV_REPLICAS)
  ${{ if eq(parameters['environment'], 'UAT') }}:
    environment: 'DEV'
    dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(UAT_AGENT_POOL)
    replicas: 1 #$(UAT_REPLICAS)
  ${{ if eq(parameters['environment'], 'PROD') }}:
    environment: 'DEV'
    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(PROD_AGENT_POOL)
    replicas: 1 #$(PROD_REPLICAS)

pool:
  vmImage: 'ubuntu-latest'

stages:
  # - stage: 'Publish_artifact_helm'
  #   displayName: 'Publish_artifact_Helm'
  #   condition: succeeded()
  #   jobs:
  #     - job: Publish_artifact_helm
  #       displayName: Publish_artifact_helm
  #       pool:
  #         vmImage: $(vmImageNameDefault)
  #       steps:
  #         - task: PublishPipelineArtifact@1
  #           displayName: 'Publish Artifact manifests'
  #           condition: succeeded()
  #           inputs:
  #             targetPath: '$(System.DefaultWorkingDirectory)/helm'
  #             artifact: 'helm'
  #             publishLocation: 'pipeline'
  - stage: 'Deploy'
    displayName: 'Deploy_to_${{ parameters.environment }}'
    dependsOn: [] #"Publish_artifact_helm"
    condition: succeeded()
    jobs:
      - deployment: 'Deploy_to_${{ parameters.environment }}'
        displayName: 'Deploy_to_${{ parameters.environment }}'
        pool:
          name: $(selfHostedAgentPool)
        environment: '${{ parameters.environment }}'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: Bash@3
                  displayName: Get POM version
                  name: getpomversion
                  condition: succeeded()
                  inputs:
                    targetType: 'inline'
                    script: |
                      pwd
                      ls -la $(System.DefaultWorkingDirectory)/helm
                    failOnStderr: true
                # - task: DownloadPipelineArtifact@2
                #   inputs:
                #     buildType: 'current'
                #     artifactName: 'helm'
                #     targetPath: '$(System.DefaultWorkingDirectory)/helm'
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(System.DefaultWorkingDirectory)/helm
                    chartName: $(K8S_IMAGE_REPOSITORY_NAME)
                    releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
                    valueFile: "$(System.DefaultWorkingDirectory)/helm/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 2m0s"
                - task: KubernetesManifest@0
                  displayName: Patch deployment to force the reload
                  inputs:
                    kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    action: patch
                    kind: deployment
                    name: '$(deploymentName)'
                    mergeStrategy: strategic
                    patch: '{"spec":{"template":{"metadata":{"annotations":{"buildNumber":"$(Build.BuildNumber)"}}}}}'



                    