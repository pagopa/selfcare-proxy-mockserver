# Azure DevOps pipeline to release a new version and deploy to production.

# Only manual activations are intended
trigger: none
pr: none

resources:
  - repo: self

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    default: dev
    values:
      - DEV
      - UAT
      - PROD
  - name: version
    displayName: Version of the docker image
    type: string
    default: 5.15.0
  - name: 'executeBuild'
    displayName: 'Remove this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: true

variables:
  dockerfileRelativePath: '$(DOCKERFILE)' # DockerfileV1
  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  deployNamespace: '$(DEPLOY_NAMESPACE)'
  deploymentName: '$(DEPLOYMENT_NAME)'
  port: 8080
  # Agent VM image name for Build
  vmImageNameDefault: 'ubuntu-latest'

  ${{ if eq(parameters['environment'], 'DEV') }}:
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(DEV_AGENT_POOL)
    replicas: 1 #$(DEV_REPLICAS)
  ${{ if eq(parameters['environment'], 'UAT') }}:
    dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(UAT_AGENT_POOL)
    replicas: 1 #$(UAT_REPLICAS)
  ${{ if eq(parameters['environment'], 'PROD') }}:
    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(PROD_AGENT_POOL)
    replicas: 1 #$(PROD_REPLICAS)

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: 'DataPreparation'
    displayName: 'Configuring_environment_to_deploy_into_${{ variables.environment }}'
    jobs:
      - job: DeterminingVersion
        displayName: DeterminingVersion
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Bash@3
            displayName: Get docker image version
            name: getDockerImageVersion
            condition: succeeded()
            env:
              VALUES_FILE: "helm/values.yaml"
              CHART_FILE: "helm/Chart.yaml"
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat $VALUES_FILE | grep '^  tag:' | sed 's/^  tag:\s*//')
                echo -e "\nappVersion: \"$version\"" >> $CHART_FILE
                echo "##vso[task.setvariable variable=dockerImageVersion;isOutput=true]$version"
              failOnStderr: true
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact helm'
            inputs:
              targetPath: 'helm'
              artifact: 'helm'
              publishLocation: 'pipeline'
  - stage: 'Build'
    displayName: 'Build_and_Pusblih_to_${{ variables.environment }}'
    condition: and( succeeded(), ${{ parameters.executeBuild }} )
    dependsOn: DataPreparation
    variables:
      dockerImageVersion: $[ stageDependencies.DataPreparation.DeterminingVersion.outputs['getDockerImageVersion.dockerImageVersion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            displayName: 'Build_image'
            condition: succeeded()
            inputs:
              command: 'Build'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              repository: '$(imageRepository)'
              tags: |
                $(Build.BuildNumber)
                latest
                $(dockerImageVersion)
              containerRegistry: '$(COMMON_CONTAINER_REGISTRY_SERVICE_CONN)'
              buildContext: '$(Build.Repository.LocalPath)'
          - script: |
              docker tag '$(COMMON_CONTAINER_REGISTRY_NAME)/$(imageRepository):latest' '$(containerRegistry)/$(imageRepository):latest'
              docker tag '$(COMMON_CONTAINER_REGISTRY_NAME)/$(imageRepository):$(Build.BuildNumber)' '$(containerRegistry)/$(imageRepository):$(Build.BuildNumber)'
              docker tag '$(COMMON_CONTAINER_REGISTRY_NAME)/$(imageRepository):$(dockerImageVersion)' '$(containerRegistry)/$(imageRepository):$(dockerImageVersion)'
            displayName: 'Tag_image'
          - task: Docker@2
            displayName: 'Publish_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'push'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildNumber)
                latest
                $(dockerImageVersion)
  - stage: 'Deploy'
    displayName: 'Deploy_to_${{ parameters.environment }}'
    dependsOn: ['DataPreparation', 'Build']
    condition: succeeded()
    jobs:
      - deployment: 'Deploy_to_${{ parameters.environment }}'
        displayName: 'Deploy_to_${{ parameters.environment }}'
        pool:
          name: $(selfHostedAgentPool)
        environment: '${{ parameters.environment }}'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm'
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: $(K8S_IMAGE_REPOSITORY_NAME)
                    releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
                    valueFile: "$(Pipeline.Workspace)/helm/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 2m0s"
                - task: KubernetesManifest@0
                  displayName: Patch deployment to force the reload
                  inputs:
                    kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    action: patch
                    kind: deployment
                    name: '$(deploymentName)'
                    mergeStrategy: strategic
                    patch: '{"spec":{"template":{"metadata":{"annotations":{"buildNumber":"$(Build.BuildNumber)"}}}}}'



                    